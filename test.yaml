name: AIG Toolbox
description: AIG Toolbox
host: WORD
api_set: {}
script:
  content: >
    let openAIKey = localStorage.getItem("openAIKey") || "";

    let openAIUrl = localStorage.getItem("openAIUrl") || "";


    document.addEventListener("DOMContentLoaded", function() {
      const apiKeyInputContainer = document.getElementById("apiKeyInputContainer");
      const apiUrlInputContainer = document.getElementById("apiUrlInputContainer");

      if (openAIKey && openAIUrl) {
        if (apiKeyInputContainer) apiKeyInputContainer.style.display = "none";
        if (apiUrlInputContainer) apiUrlInputContainer.style.display = "none";
      }
    });


    document.getElementById("saveApiKeyButton").addEventListener("click",
    function() {
      openAIKey = document.getElementById("apiKeyInput").value;
      localStorage.setItem("openAIKey", openAIKey);
      alert("API Key saved");
    });


    document.getElementById("saveApiUrlButton").addEventListener("click",
    function() {
      openAIUrl = document.getElementById("apiUrlInput").value;
      localStorage.setItem("openAIUrl", openAIUrl);
      alert("API URL saved");
    });


    document.getElementById("eraseCredentialsButton").addEventListener("click",
    function() {
      localStorage.removeItem("openAIKey");
      localStorage.removeItem("openAIUrl");
      openAIKey = "";
      openAIUrl = "";
      document.getElementById("apiKeyInputContainer").style.display = "block";
      document.getElementById("apiUrlInputContainer").style.display = "block";
      alert("API credentials erased");
    });


    Office.onReady((info) => {
      if (info.host === Office.HostType.Word) {
        console.log("Office is ready in Word.");
      }
    });


    async function callOpenAI(systemPrompt, callback) {
      if (!openAIKey || !openAIUrl) {
        alert("Please enter and save your OpenAI API key and URL.");
        return;
      }

      try {
        await Word.run(async (context) => {
          const selection = context.document.getSelection();
          context.load(selection, "text");
          await context.sync();

          let textToSend = selection.text;
          console.log("Selected text:", textToSend); // Log the selected text

          if (textToSend.length === 0) {
            const body = context.document.body;
            context.load(body, "text");
            await context.sync();
            textToSend = body.text;
            console.log("Whole document text:", textToSend); // Log the whole document text
          }

          if (textToSend.length === 0 || textToSend.length > 10000) {
            console.log("Text validation failed. Length:", textToSend.length);
            alert("The selected text is either empty or too long.");
            return;
          }

          const cfg = {
            apiVersion: '2024-04-01-preview',
            modelName: "gpt4o",
            message: textToSend,
            apiKey: openAIKey,
            endPoint: openAIUrl,
            stream: false,
          };

          console.log("Configuration settings:", cfg);

          const bodyContent = JSON.stringify({
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: cfg.message }
            ],
            stream: cfg.stream,
          });

          console.log("Body content to send:", bodyContent);

          const response = await fetch(`${cfg.endPoint}/openai/deployments/${cfg.modelName}/chat/completions?api-version=${cfg.apiVersion}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${cfg.apiKey}`,
            },
            body: bodyContent,
          });

          console.log("Fetch response status:", response.status, response.statusText);

          if (!response.ok) {
            throw new Error(`Failed to fetch from OpenAI: ${response.statusText}`);
          }

          const result = await response.json();
          console.log("Response JSON received:", result);

          let output;
          if (result.msg) {
            output = result.msg;
          } else if (result.choices && result.choices.length > 0) {
            output = result.choices[0].message.content;
          } else {
            throw new Error("Invalid response structure");
          }

          callback(textToSend, output);

        });
      } catch (error) {
        console.error("Error in callOpenAI:", error);
        alert("Error: " + error.message);
      }
    }


    async function searchAndComment(searchText, commentText) {
      await Word.run(async (context) => {
        const selection = context.document.getSelection();
        context.load(selection, 'text');
        await context.sync();

        if (selection.text.length > 0) {
          selection.insertComment(commentText, { author: "OpenAI GPT", initials: "GPT" });
          await context.sync();
          console.log("Comment added successfully.");
        } else {
          const body = context.document.body;
          body.insertParagraph("", Word.InsertLocation.end); // Add a blank line before the GPT output
          body.insertParagraph("--- GPT output:", Word.InsertLocation.end); // Add the GPT output header
          commentText.split('\n').forEach(line => {
            body.insertParagraph(line, Word.InsertLocation.end);
          });
          body.insertParagraph("", Word.InsertLocation.end); // Add a blank line after the GPT output
          await context.sync();
          console.log("GPT output appended to the end of the document.");
        }
      });
    }


    function leadershipReviewer() {
      callOpenAI("Make an assessment on whether or not the information should be submitted as it is to the Leader. Assume this is a submission by the Legal team. Rate from 0 to 5 and explain the reasoning. If it not a 5, rewrite to make it as a 5.", searchAndComment);
    }


    function bulletPointSummarizer() {
      callOpenAI("Summarize the content and present it in bullet points. Ensure it is short to the point, only the essence. Max word per sentence: 14", searchAndComment);
    }


    function articleWriter() {
      callOpenAI("As per the instructions provided, draft a clause that includes all essential elements.", searchAndComment);
    }


    function translateToIndonesian() {
      callOpenAI("Translate the following text to Bahasa Indonesia.", searchAndComment);
    }


    document.getElementById("leadershipReviewerButton").addEventListener("click",
    leadershipReviewer);

    document.getElementById("bulletPointSummarizerButton").addEventListener("click",
    bulletPointSummarizer);

    document.getElementById("articleWriterButton").addEventListener("click",
    articleWriter);

    document.getElementById("translateToIndonesianButton").addEventListener("click",
    translateToIndonesian);
  language: TypeScript
template:
  content: >
    <div id="apiKeyInputContainer">
      <input type="text" id="apiKeyInput" placeholder="Enter API Key">
      <button id="saveApiKeyButton">Save API Key</button>
    </div>

    <div id="apiUrlInputContainer">
      <input type="text" id="apiUrlInput" placeholder="Enter API URL">
      <button id="saveApiUrlButton">Save API URL</button>
    </div>


    <div style="margin-top: 20px;">
      <button id="leadershipReviewerButton">Leadership Reviewer</button>
      <button id="bulletPointSummarizerButton">Bullet Point Summarizer</button>
      <button id="articleWriterButton">Article Writer</button>
      <button id="translateToIndonesianButton">Translate to Bahasa Indonesia</button>
    </div>


    <button id="eraseCredentialsButton" style="margin-top: 40px;">Erase
    Credentials</button>
  language: HTML
style:
  content: ''
  language: CSS
libraries: |-
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts
  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css
  core-js@2.4.1/client/core.min.js
  @types/core-js
  jquery@3.1.1
  @types/jquery
