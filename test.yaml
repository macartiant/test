name: Initial test
description: Script to analyze document paragraphs using OpenAI API
host: WORD
api_set: {}
script:
  content: >
    let openAIKey = localStorage.getItem("openAIKey") || "";

    let openAIUrl = localStorage.getItem("openAIUrl") || "";


    document.getElementById("saveApiKeyButton").addEventListener("click",
    function() {
      openAIKey = document.getElementById("apiKeyInput").value;
      localStorage.setItem("openAIKey", openAIKey);
      alert("API Key saved");
    });


    document.getElementById("saveApiUrlButton").addEventListener("click",
    function() {
      openAIUrl = document.getElementById("apiUrlInput").value;
      localStorage.setItem("openAIUrl", openAIUrl);
      alert("API URL saved");
    });


    Office.onReady((info) => {
      if (info.host === Office.HostType.Word) {
        console.log("Office is ready in Word.");
      }
    });


    async function callOpenAI(systemPrompt, modelVersion) {
      if (!openAIKey || !openAIUrl) {
        alert("Please enter and save your OpenAI API key and URL.");
        return;
      }

      try {
        await Word.run(async (context) => {
          console.log("Starting Word.run()...");

          // Get the content of the document
          const body = context.document.body;
          context.load(body, "text");
          await context.sync();
          console.log("Document content loaded:", body.text);

          // Prepare data for the OpenAI API call
          const data = JSON.stringify({
            model: modelVersion,
            messages: [
              { role: "system", content: systemPrompt },
              { role: "user", content: body.text }
            ],
            temperature: 0,
            top_p: 0
          });
          console.log("Data prepared for OpenAI API:", data);

          const response = await fetch(openAIUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: "Bearer " + openAIKey
            },
            body: data
          });
          console.log("API response received.");

          if (!response.ok) {
            throw new Error("Failed to fetch from OpenAI: " + response.statusText);
          }

          const jsonResponse = await response.json();
          console.log("Response JSON parsed:", jsonResponse);

          const result = jsonResponse.choices[0].message.content;
          console.log("Result from OpenAI:", result);

          // Insert a visual separator
          body.insertParagraph("----------", "End"); // You can customize this line as needed
          body.insertParagraph("GPT Output:", "End").font.set({
            bold: false
          }); // Adds a header for the GPT output, optional

          // Insert the result into the document as formatted text
          result.split("\n").forEach((line, index) => {
            if (line.trim() === "") {
              body.insertParagraph("", "End");
            } else {
              body.insertParagraph(line, "End");
            }
          });

          await context.sync();
          console.log("Formatted result inserted into document.");
        });
      } catch (error) {
        console.error("Error:", error);
      }
    }


    // Example function usage

    function leadershipReviewer() {
      callOpenAI(
        "Make an assessment on whether or not the information should be submitted as it is to the Leader. Assume this is a submission by the Legal team. Rate from 0 to 5 and explain the reasoning. If it not a 5, rewrite to make it as a 5.",
        "gpt-4"
      );
    }


    function bulletPointSummarizer() {
      callOpenAI(
        "Summarize the content and present it in bullet points. Ensure it is short to the point, only the essence. Max word per sentence: 14",
        "gpt-4"
      );
    }


    function articleWriter() {
      callOpenAI("As per the instructions provided, draft a clause that includes all essential elements.", "gpt-4");
    }


    document.getElementById("leadershipReviewerButton").addEventListener("click",
    leadershipReviewer);

    document.getElementById("bulletPointSummarizerButton").addEventListener("click",
    bulletPointSummarizer);

    document.getElementById("articleWriterButton").addEventListener("click",
    articleWriter);
  language: TypeScript
template:
  content: |
    <div>
      <label for="apiKeyInput">OpenAI API Key:</label>
      <input type="text" id="apiKeyInput" placeholder="Enter your API key">
      <button id="saveApiKeyButton">Save API Key</button>
    </div>
    <div>
      <label for="apiUrlInput">OpenAI API URL:</label>
      <input type="text" id="apiUrlInput" placeholder="Enter the API URL">
      <button id="saveApiUrlButton">Save API URL</button>
    </div>
    <button id="leadershipReviewerButton">Leadership Reviewer</button>
    <button id="bulletPointSummarizerButton">Bullet Point Summarizer</button>
    <button id="articleWriterButton">Article Writer</button>
  language: HTML
style:
  content: |-
    <style>
      .button {
        padding: 10px 20px;
        font-size: 16px;
        margin-top: 5px;
        cursor: pointer;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
      }

      .button:hover {
        background-color: #45a049;
      }
    </style>
  language: CSS
libraries: |-
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts
  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css
  core-js@2.4.1/client/core.min.js
  @types/core-js
  jquery@3.1.1
  @types/jquery
